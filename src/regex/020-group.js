/** 
 * 选择, 分组, 引用 (20181207)
 * |: 选择,匹配的是该符号左边的子表达式或右边的
 * \n: 和第n个分组第1次匹配的字符相匹配, 组是圆括号中的子
 *      表达式(也有可能是嵌套的), 组索引是从左到右的左括号数
 *      "(?:" 形式的分组不编码. 
 * 
 * 区间: 规定重现次数的范围
 *  [a-zA-Z]{1,5} : 1到5个字母
 *  ? = {0, 1}
 * 
 * () 分组和捕获, 将几个项组合为1个单元,可通过 "*","+","?","|" 加以修饰
 * (?:) 只分组不捕获, 把项组合到1个单元, 不记忆与该组相匹配的字符
 * ()? 不贪婪匹配 
 * 
 */

/ab|cd|ef/; 
// 可用字符串"ab",也可以匹配字符串"cd",还可以匹配字符串"ef".

/\d{3}|[a-z]{4}/; 
// 匹配3位数字或四个小写字母

// 圆括号有两个作用
//   其一: 把单独的项组合成了子表达式
//   其二: 在完整的模式中定义子模式.
//   其三: 允许在同一正则表达式后部引用前面的子表达式
/java(script)?/;
// 可以匹配字符串 java, 其后 "script" 可有可无
/(ab|cd)+|ef/;
// 可以匹配字符串"ef", 也可以匹配字符串 "ab" 或 "cd"

/[a-z]+\d+/;
(/[a-z]+(\d+)/);
//将模式的数字部分放在括号中, 就可检索到匹配中抽取数字了

/([Jj]ava([Ss]cript)?)\sis\s(fun\w*)/;
// 其中 \1:([Jj]ava), \2:[Ss]cript,

// 与那个模式相匹配的文本的引用
/['"][^'"]*['"]/; // 匹配单引号和双引号之内的 0 个或多个字符
/(['"])[^'"]*\1/; // 使用左侧的括号
/(['"])[^/1]*\1/; // 非法写法, 正则表达式不允许用双引号括起内容中有单引号.

var str = "test text";
/([a-z])([0-9])/.test(str);

// HTTP/HTML URL
// /\http://[-a-z0-9_.:]+/[-a-z0-9_:@&?=+,.!/~*%$]*\.html?/;

//时间 9:17 am 或者 12:30 pm
/(1[012]|[1-9]):[0-5][0-9](am|pm)/;

//24小时制
/0?[0-9]|1[0-9]|2[0-3]:/;

//区配正负 华摄氏度
/[-+]?[0-9]+[CF]/;

// 接收 98.6f 输入
/([-+]?[0-9]+(\.[0-9]*)?)([CF])/;
// 用 (\.[0-9]*)? 这样做副作用是括号内的子表达式捕获
// 的文本保存到$2中。而我们并不会使用$2

//用 \s匹配所有空白
/([-+]?[0-9]+(\.[0-9]*)?)\s*([CF])$/i;
//matching "CFcf"

// 匹配 用户名 和 主机名
/[-a-z0-9]+(\.[-a-z0-9]+)*\.(com|edu|info)/;

// 除掉括号
('(555)666-1212'.replace(/\((\d{3})\)/g, '$1-'));

